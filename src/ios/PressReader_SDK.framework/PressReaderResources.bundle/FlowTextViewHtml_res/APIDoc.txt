#
# TextViewAPI Changelog and documentation.
#
2015-10-02:
Added Google Analytics reports callbacks:
SF will call "analytics" with data token. By this token applicaiton should request data with GA data.
Possible data:
{"type":"timing","category":"FirstViewLoaded","variable":"topnews","timeSpent":4470}
{"type":"pageview","page":"/pressreader/SmartFlow/topnews/Home Feed"}
{"type": "event", "category": "category", "action": "action", "label": "label", "value": 100}

2015-08-12:
Introduced new sharing callbacks:
"share.facebook","share.twitter","share.google","share.email" - data format may differ :)


2015-06-11

Social SignIn Routines:
TextViewApi.registerExternalAuthentication('facebook') - register native share SDK provider by name. In this case SF will fire callback event 
externalAuthentication?provider=<name>&key=<key>

TextViewApi.processExternalAuth(key) - now accepts optional auth_key

2015-02-23

Opinions support:

TextViewAPI.showOpinion( { opinion:webName } ) - to display opinion view. 'webName' - opinion webName (string) (in format like this: 'this-is-my-super-opinion')
TextViewAPI.addOpinion()  - displays add opiniod dialog. After user confirms, SF API signal will be send:
'opinionAdded' with arguments 'opinionId', 'webName' or 'opinionText'.

Also there is a signal 'showOpinionView' when user clicks on opinion in comment dialog, so NC should process this signal from SF popups webview
by opening opinion view in SF: TextViewAPI.showOpinion( {opinion:webName} ). 

Also there is config parameter: 'enableOpinions' to enable build-in opinions elements in UI (should be 'false' for phone idiom). TextViewAPI.Parameters( { enableOpinions:true } );



2014-11-13


'platform.getThumbPath' in _extentions.js:

In order to page thumbnails be visible when SF is in offline mode, add implementation of this function into platform section in _extentions.js.
This js function should format path to the local thumbnail files on the file system or to local http server to get thumbnail images.
Implement 'getThumbPath' function in such way that this function will return full path to thumbnail image.

Probably you going to need to set some parameters variable to initial path. 'ThumbsPath' parameter name is recomented for that:
iOS: "TextViewAPI.Parameters( { ThumbsPath:'file:///%@/' } )"

You can set this parameters at the time of initializing SF or every time when a newspaper gets opened. 

for example, iOS thumbnail to the first page is stored in format:  thumbpath/0001.png 
and 'getThumbPath' will be:
 
 
platform.getThumbPath = function( issueId, page, width ) {
    var pageNo = Util.formatInt( page, 4 );
    return pdadapters.Parameters.get('ThumbsPath') + pageNo + '.png';
};


2014-10-27

To update dynamic articles info (comments count), please call this method:

TextViewAPI.updateDynamicArtInfo( json )

argument format (non-quoted):

{ commentsCounts:[ { artId:'281479274671818', count:1, likes:0, dislikes:1 },{ artId:'281483569639114', count:0, likes:0, dislikes:0 },{ artId:'281492159573706', count:0, likes:0, dislikes:0 } ] }

The best practice to date is to call 'pagesmetadata/' on delivery queue on every page change in the reading view, post a notification
to the app when data is ready, handle this notification in SF controller by calling 'updateDynamicArtInfo' on TextViewAPI.

Also, NC should process signal from SF popups webview: 'articleCommentsCountUpdate' by updating in-memory newspaper smart layout (xml layout), 
so next time when NC preparing data for the SF from xml layout, comments count will be up-to-date with new comments user made before.

Also by calling 'updateDynamicArtInfo' on the SF webview like this:

TextViewAPI.updateDynamicArtInfo( { commentsCounts:[ { artId:'281479274671818', count:0 } ] } )

and vise versa, signal from SF webview crosspost to SF popups webview.



2014-07-22

to show particular view, NC should call corresponding 'showXXXXX' api method

showTextView - text view of current Issue ( see 'SF Initialization flow' )
showTopNewsView - top news view
showFtsView - search results view
showMonitorsView 
showRadioView
showBookmarksView
showProfileView



showTopNewsView with preloaded data.

To parallelize loading topnews view (initializing scripts stage and pre-loading of the data), there is 
a new call 'putHomeFeedData'. NC need to start a request to services for home feed data before initialization of SF. Because newtwork request
is asyncronous, when scripts are initialized, topnewsfeeddata is ready, so you need to put it into 'putHomeFeedData' call.
Make sure you set the parameter 'waitForData' in the 'Parameters' call, so topnews view initialization code will be waiting for 'putHomeFeedData' call.
In this case it is doesn't matter in what order 'putHomeFeedData' and 'showTopNewsView' are called. If data is ready before 'showTopNewsView' call,
that's fine, if after - that is ok too, showTopNewsView code will wait for this call.
 


2014-06-26

TextViewAPI.showContextMenu( article, point, page [, issue] ) - added 2 parameters, page and issue for creating context without article

article - full article JSON or 'null'. 
point - tap location in format: { x:434.0, y:166.0 } or 'null'. If null, context menu will be centered in screen.
page - page number (number)
issue - optional - if you already initialized issue in .InitIssue call, this parameters is not needed.
	format: { id:'10212014062300000000001001', mid:'811485401' }


TextViewAPI.authCancelled() - Please call when authorization dialog is dismissed without proceeding. 



2014-06-04

External authorization for pr.com sharing:

when js code in webview control tries to navigate control to some url starting from 'http:', nc developer should open this url in external webview and
prevent main viebview from this navigation.
Once opened, this new control should listen for navigation to url containint string 'externalauth/processauthorization' or 'app:close-webview', and once received one,
should close this webview and call 'TextViewAPI.processExternalAuth()' on main SF vebview control.



Disabling click on user's profile in comments thread, when SF is disabled:
call TextViewAPI.Paramters( {SFisDisabled:1} );


2014-04-28
Changed SF api signal: 'showCatalog'
NC obtains data through 'getWaitingData', or override 'pushDataToNativeCode' in js for direct call without 'getWaitingData'.
data parameter contains search criteria: { filter:'Ottawa' }


2014-04-17
TextViewAPI.getTooltipElements() method added. It returns string which contains JSON array with elements:
{ x:number, y:number, kind:string }
x,y - coordinates withing browser window, kind - element kind ('readmore', 'bookmars', ... )

TextViewAPI.hideAllPopups() method added. It combines calls 'hideAllPopupMenues' and 'hideAllDialogs'

TextViewAPI.clearHistory() method added. It clears navigation history inside smarflow. If you don't 
deallocate web view between different view modes, it can help to syncronize staking of view controllers with
SF internal view state.


2014-03-31
updateUI signal to native code from SF now contains property: 'hometitle' (boolean). 
If true - native code should display PressReader logo in the titlebar.

all API calls to 'show' something are leter case unified - all start from lowercase:
(showContextMenu, showMainMenu and so one)


2014-01-20

Added main menu call TextViewApi.showMainMenu()

2014-01-17

Added callback to native code 'bookmarked' with parameters 'action=added&artid=1234567&bookmarkId=xxxxxxx
Event is called when user bookmarked some article. Needed to synchronize with offline storage.



2013-10-17.

OBSOLETE: do not use TextViewAPI.changeInterfaceLanguage() anymore.
set ui language when you initialize API: TextViewAPI.Init( { ......, uiLanguage:'en' } )


SmartFlow debugging process.

You'll need 4 directories:

FlowTextViewHtml_res:   contains files which goes to the SF package, and some service files.
Packages:               service files for working with package.                        
    ftvhtml_debug:      simulation code and data to be able to run SF in debug mode
    FlowTextViewHtml_res.bat - file I use to copy all necessary files which go to the SF package. Then I just zip it and
                               this zip-file is ready to deploy package.
    FlowTextViewHtml_res_fonts.bat - On iOS we deploy fonts in separate package. Fonts are big in size and changes are rare com-
                        pared to SF scripts, so we decided to deliver them separatelly. On the end-user device this package
                        content goes to the same location as scripts and creates the 'fonts' folder.
                        TODO: now we make version in config file on server such way, that fonts package is loaded mandatory
                        once to the users's device. It would be better just to copy them directly from resources, as
                        they present there anyway.
    copyexclude, FlowTextViewHtml_res.lst, FlowTextViewHtml_res.lst - are just lists to exclude from copying when we 
                        form the final package.

rjbuild:                We use requireJS for better scripts managebility and minification. In this folder we keep files
                        to build (to minify) scripts.
    build.bat:          for building SF text view page.
    popupsbuild.bat:    for building SF popups page.

SFSrc:                  SF source code (java script files).


To switch from release mode to debug mode I use file 'releaseDebugSwitch.py'. Just launch it once - it should detect in
what state SF is now and switch to the opposite mode.
Basically, it detects if now minified version of scripts is in folder FlowTextViewHtml_res, and moves all source code
files from SFSrc at here to make debugging possible in browser. When all debuggin done, I launch it again, it copies
all script sources back to SFSrc, then I can build scripts, commit to the svn, make package.




2013-03-21.
In simple article view please change path from scripts7/app/nativeCodeAdapter.js to scripts/nativeCodeAdapter.js
and same for utils.js.



2013-03-14.

UpdateUI signal from SF. When you receive this signal, update current toolbar title. Obtain json data through
getWaitingData call, title is contained in data.titleBar field. 



2013-03-13.


1. Offline search flow stage 1.

    When user starts search, NC (native code) calls TextViewAPI.showFtsView( { query:'one' } ).
    SF sends to NC signal 'ftsquery' with params 'searchText' and 'issue'. NC should prepare
    search results statistics (how many found in total, current title and current issue) 
    indepentend of the 'issue' argument. NC calls TextViewAPI.ftsPutStatistics( {totalCount:%d, cidCount:%d, midCount:%d} ).
    Then NC performs search query taking in account 'issue' argument which is empty (search in all), CID - 4 symbols -
    meaning search in all newspapers with this CID, or CID+date - 12 symbols - meaning search in current issue only.
    In case SQLite it adds this condition: "AND issue.issueId LIKE '{issue}%'" - where {issue} is the agrument as is, % means
    DB will return results which start from the 'issue' parameter.
    Then NC is ready for signal from SF 'getftsresults'.
    When this signal is received NC puts search results by calling TextViewAPI.ftsPut( articleJSON ) by 10 to 100 articles
    in one loop (decided by NC developer). When chunk in finished, call TextViewAPI.ftsFinalize( nomore ). Set nomore 
    to 1 when there are no more articles left.
    The 'updateSearchText' singal is for the synchronization between search term in search bar in native code and 
    in advanced search dialog is SF. When signal is received, NC should set the new search term (call 'getWaitingData( tokens )'
    to obtain it) in search bar.
  
    Advanced search is disabled for offline search so far, please disable adv serach dialog when offline.
    There will be changes in 'ftsquery' params regarding advanced search dialog in the future.



2013-03-07.

1. Search term format changed from plain text to js object: { query:'search term' }

2. PurchaseComplete should be called on purchase sequence finished when OrderDialog was opened due to user
presses 'page view' in context menu in search or top stories flow and newspaper to which context article
belongs to is not loaded locally. If it is available locally it should be opened and positioned on this article.

3. showAdvSearchDialog. valid to call for popups.html only. Displays htlm advanced search dialog with search query
as argument: { query:'serch term' }. When user start search, popups.html calls native code with command 'startSearch'
and native code should extract cmd parameters with 'getWaitingData' request, which is full search query object
which should be passed by native code to the smartFlow call 'showFtsView'.


4. Requirement 'do not allow post comments from device account':
Parameter should be passed to the SF after 'ready' signal received from SF and before 'SetOnlineState' method is called:
TextViewAPI.Parameters( {DisableFullScreen:%d, IsDeviceAccount:%d} )


2012-11-22.

SF Initialization flow:

1. load ftvhtmlmain.html into web control with url-encoded system parametes:
        ?systemName=<your platform name (iOS, Android, Win8, etc)>&debug=%d.

2. html page starts js code, which installs platform adapter function 'browserNavigate'.
    then it calls native code via this function. It sends message: 'init'.
    app code should respond with extended system parameters, json encoded:

    TextViewAPI.Init( 
       { debug: 1, systemName:'iPhone OS', deviceModel:'iPad1,1', deviceType:'iPad', deviceName:'MyPad',
        osVer:'5.0.1', uiLanguage:'en' }
       );

3. SF code loads view framework and basic view controls, then it sends message: 'ready'.

    After that app can setup supported actions via TextViewAPI.ActionsConfig, setup base service url:
    TextViewAPI.SetUrlsProvider.
    
    Now app can start text view initialization:

    Change textview settings:

    TextViewAPI.Parameters( { DisableFullScreen:%d, screensToBuild:%d } );

    Setup autotranslation:
    TextViewAPI.autotranslation( { enabled:true, translateTo:'%@', exceptFrom:[ %@ ] } );

    Start issue initialization flow:    

    TextViewAPI.InitIssue(
        {id:'%@', page:%d, title:'%@', article:'%@', language:'%@', smartVersion:%d, isRadioAvailable:%d }
    );
    js MAY send message 'gettoc' ( it doesn't when autotranslation is set to 'true'. In this case
    SF should load cloud data from online loader. )

    TextViewAPI.putTOCPages( [%@] )
    and
    extViewAPI.putTOCArticles( [%@] )
    and, to finalize, call
    TextViewAPI.dataLoadReady().



2012-11-21.

TextViewAPI.showContextMenu( contextArticleJSON, point );
    Displays PD7's context menu at point

TextViewAPI.showCommentInput( contextArticleJSON );
    Displays PD7's comments or input dialog if there are no comments so far.

TextViewAPI.ReadingStatStartStop( start );
    Starts/stops gathering reading statistic ( Call it when SF bacomes visible or hidden )

TextViewAPI.SetOnlineState( json );
    Drives SF into online or offlie state. Expects object like { ticket:'<auth-ticket>' } 
    or ( nothing or empty object ) for going offline

TextViewAPI.SetUrlsProvider( json );
    Delivers to SF base service url(s).
    For now it is only single base service url in format: { serviceUrl:'url here'}
    TODO: probably will be moved to Parameters.

TextViewAPI.Parameters( json or string );
    Merges argument's fields into existing paramters if passed as json.
    Returns single parameters if arg passed as a string


TextViewAPI.ActionsConfig( json )
   Replaces TextViewAPI.pushConfig method.
   Configures enabled and disabled actions in context menu.
   All actions are disabled by default. If the app supports some of them - you need to configure it by this method.
   example: { actionsSupported:{ printing:%d, copying:%d, evernoteSharing:%d, listening:%d, generalSharing:%d, 
                        pageViewing:%d, textViewing:%d, facebookSharing:%d, twitterSharing:%d, emailSharing:%d,
                        instapaperSharing:%d, commenting:%d }
   if you want to restrict some of your supported actions, use it as follow:
   { restrictions:{ vote_disabled:%d, page_view_disabled:%d, copy_article_disabled:%d, sound_disabled:%d,
                    article_printing_disabled:%d, sharing_disabled:%d, evernote_disabled:%d, commenting_disabled:%d } }
 




earlier:


TextViewController.showTopNewsView()  
    ( or now you can write it shorter: TextViewAPI)
    Displays top stories in smartFlow. SmartFlow should be loaded till 'ready' message from it, and it should be authorized.

TextViewAPI.showFtsView( { query:'one' } )  
    extra parameters will be added later
    Displays search results in smartFlow. Initialization is the same as for showTopNewsView call.

TextViewAPI.HighlightString( ['one'] )
    highlight given string in smartFlow.

TextViewAPI.pushConfig( 'jsonRestrictions' ). 
    Removes actions from press-and-hold menu, restricted by host.
    Example: TextViewAPI.pushConfig( { restrictions:{ vote_disabled:1 } } );

TextViewAPI.getWaitingData( 'token' ).  
    Request for waiting data, prepared by js code for native code to pick up.
    For certain calls from js to native code we need to send some data along with the command, like copying to buffer,
    when user wants to make it in the top stories view or in the search results view, or posting reading statistic data.
    But not everything is possible or convenient to post directly into native code, because such calls are usually
    done via urls, and not everything possible or convinient to encode to url, so, if the platform (like android)
    supports direct call to native code with data, such function can be implemented in '_extentions.js' like this:

    pushDataToNativeCode = function( dataname, params, data ) {  jwindow.pushData( cmd, urlparams, data ); };

    If there is no such function defined, API will store command data locally and send to native code parameter
    'tokens', which native code should use in back call to API to obtain prepared data. 'tokens' is a string of
    coma-separated strings-tokens. Native code should separate tokens from each other and obtain data by calling
    back TextViewAPI.getWaitingData( 'token' ) sequentially for each token.





